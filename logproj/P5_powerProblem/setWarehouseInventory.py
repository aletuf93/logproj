# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

inventory_values = [8747125476.488422, 8747118414.911827, 8746976423.047096, 8746963223.418716, 8746846530.46753, 8746833550.097189, 8746833550.097189, 8746765886.8142, 8746741555.615498, 8746687004.356863, 8746643398.223368, 8746634436.009138, 8746634652.331865, 8746634652.331865, 8746607748.807878, 8746608881.300627, 8746583403.258062, 8746602295.187578, 8746613845.824091, 8746599269.431803, 8746599269.431803, 8746601053.050816, 8746554118.821375, 8746552332.69338, 8746521317.464767, 8746792390.175999, 8746768609.904238, 8746768609.904238, 8746766420.714108, 8746729274.510595, 8746724509.139492, 8746726037.87311, 8746719474.880571, 8746720041.226847, 8746720041.226847, 8746711277.548681, 8746704666.84629, 8746725007.674488, 8747224668.935526, 8746731014.131836, 8746713540.523018, 8746713540.523018, 8746808626.015089, 8748445758.332993, 8752131377.238962, 8753328259.30056, 8753559618.554459, 8753567128.368147, 8753567128.368147, 8754248133.464537, 8754180818.868917, 8754389448.315678, 8754349853.057613, 8754362203.229786, 8754362203.229786, 8754362203.229786, 8756162951.465488, 8757070867.742752, 8757804023.647457, 8757159089.144278, 8757259636.301655, 8757259636.301655, 8757259636.301655, 8757365260.766281, 8761398204.57721, 8762101756.765087, 8762437288.627415, 8762673934.743864, 8762673934.743864, 8762673934.743864, 8762284370.350573, 8762643155.77123, 8762428841.630661, 8757247818.922976, 8757644304.748215, 8757644304.748215, 8757644304.748215, 8757459417.406275, 8757459317.815231, 8757382668.415255, 8756545152.82631, 8756563772.684437, 8756563772.684437, 8756567975.434122, 8756542232.22214, 8755303119.193913, 8758229173.133574, 8758509782.188902, 8758595442.241201, 8758595442.241201, 8758595442.241201, 8758560684.25962, 8759553939.774572, 8760240786.86393, 8758542936.154009, 17503827960.960274, 17503827960.960274, 17503827960.960274, 17503827960.960274, 17503766315.43527, 17500336555.074924, 17500246984.0385, 17498328253.991352, 17498328253.991352, 17498328253.991352, 17500044873.97982, 17500044873.97982, 17501895062.78833, 17502225210.592205, 17502242628.51177, 17502242628.51177, 17502242628.51177, 17502242628.51177, 17501394645.23468, 17501179701.337357, 17501495761.94073, 17500911131.323223, 17500911131.323223, 17500911131.323223, 17501244286.119007, 17501178417.171288, 17501753444.00776, 17502023251.18908, 17501940883.37301, 17501940883.37301, 17501940883.37301, 17501784471.976463, 17504506610.355576, 17505003112.45779, 17504754359.970516, 17502229357.758366, 17502229357.758366, 17502229357.758366, 17502652543.488224, 11565128.975350907, 11971294.851490783, 12890309.818595741, 11878264.61169849, 11877477.203664942, 11877477.203664942, 10937658.91415558, 10066981.779837908, 10056102.086450428, 10211893.735515777, 10211893.735515777, 10211893.735515777, 10211893.735515777, 9930085.901135491, 9340170.694861254, 9607246.974886857, 9726347.760459168, 9814985.95663564, 9814985.95663564, 9814985.95663564, 9597332.094188288, 9846209.448116425, 10073574.499326378, 10310483.171886675, 9976089.642589847, 9976089.642589847, 9976089.642589847, 11551180.609779213, 12275032.805396063, 12971846.001187306, 12133682.647057308, 11011097.439569892, 10979070.660170825, 10979070.660170825, 10940384.810484847, 10954469.751925142, 10932891.523942878, 8915283.781860854, 8804608.574355483, 8804608.574355483, 8804608.574355483, 8857918.592288963, 8679596.335115973, 8487241.082484944, 9927147.932601165, 11313728.506109707, 11313728.506109707, 11313728.506109707, 11393087.182655994, 11917541.613530427, 14555902.912044233, 11932246.133122442, 12583001.078753728, 12583001.078753728, 12583001.078753728, 10958846.020079164, 11033641.292592376, 10811908.726795934, 10993142.470009886, 12061678.63641324, 12061678.63641324, 12061678.63641324, 12122607.927839873, 12490185.545996014, 12318150.499319881, 12446356.663199147, 12543735.561394349, 12560389.211160539, 12560389.211160539, 12859909.681178937, 12275544.561584681, 11987557.957400369, 11533506.228318138, 11239409.92570029, 11239409.92570029, 11239409.92570029, 11225878.324878065, 11912745.09013694, 11886669.77293902, 11556285.188210305, 11507494.84556207, 11507494.84556207, 11507494.84556207, 11507494.84556207, 11507494.84556207, 11587144.656510806, 12031821.204101788, 11813337.22782615, 11813337.22782615, 11813337.22782615, 8759878916.923452, 8760010564.101538, 8760298419.434563, 8760247027.955568, 8762384242.09558, 8762384242.09558, 8762384242.09558, 8762445509.13892, 8762206420.823551, 8761037190.50179, 8760967874.126234, 8758323456.001762, 8758323456.001762, 8758323456.001762, 8755399493.96201, 8755170951.877932, 8755186334.514694, 8755104332.289639, 8756066319.782902, 8756266591.330904, 8756266591.330904, 8757057983.39013, 8756203898.845911, 8757963590.28577, 8759109496.520084, 8757820360.53521, 8757820360.53521, 8757820360.53521, 8757144857.742458, 8757064537.695318, 8757553507.025839, 8757521301.430202, 8757610963.701263, 8757597104.5362, 8757597104.5362, 8758470957.72352, 8758015278.107418, 8757570273.85235, 8756929722.407736, 8756989441.096659, 8756989441.096659, 8756989441.096659, 8756886497.705976, 8755883868.8004, 8756523014.923285, 8756238761.793537, 8758511457.040972, 8758456344.83758, 8758454263.177767, 8759386911.692686, 8758967802.797453, 8759993021.415678, 8759580583.514786, 8759845143.365482, 8759845143.365482, 8759845143.365482, 8760078489.959803, 8759950412.048155, 8759406821.176739, 8758692712.713257, 8756114082.511593, 8756114082.511593, 8756114082.511593, 8756659168.021498, 8757558443.250046, 8755469353.575481, 8755678789.547697, 8755618963.880327, 8755587352.61856, 8755587352.61856, 8755644751.982729, 8755614794.094097, 8755614794.094097, 8755964343.141443, 8756184026.405636, 8756184026.405636, 8756184026.405636, 8755989456.771576, 8755846568.282976, 8755999294.418219, 8756419595.590698, 8757466450.720583, 8757466450.720583, 8757466450.720583, 8756246455.312876, 8756483040.7289, 8757717412.063972, 8757797490.615696, 8757530800.846142, 8757530800.846142, 8757530800.846142, 8757596369.415995, 8757601211.652752, 8758473242.810406, 8758028599.03219, 8757857869.235373, 8757848850.127474, 8757848850.127474, 8757733727.661331, 8757227872.08829, 8756485759.193586, 8756411998.504335, 8755411732.324152, 8755411732.324152, 8755411732.324152, 8755614725.964117, 8756725380.804176, 8756801140.28143, 8756998004.779022, 8756998004.779022, 8756998004.779022, 8756998004.779022, 8757158555.25937, 8757013444.338165, 8757195612.61654, 8756958233.763056, 8758211692.565092, 8758197479.204327, 8758197479.204327, 8757938138.15927, 8757852457.297712, 8758147001.249058, 8759716364.560791, 8759274886.226011, 8759274886.226011, 8759274886.226011, 8759274886.226011, 8759274886.226011, 8759279555.496662, 8759382937.113531, 8759385548.526072, 8759385548.526072, 8759385548.526072, 8759385548.526072, 8757052421.661686, 8756846178.015007, 8756840391.415604, 8756594238.260128, 8756594238.260128, 8756594238.260128, 8756606203.565945, 8756130295.882261, 8756325871.932728, 8760221762.563663, 8760685155.401299, 8760685155.401299, 8760685155.401299, 8757789567.180576, 8758025955.782179, 8759813252.35301, 8759330364.100416, 8761008875.583036, 8761008875.583036, 8761008875.583036, 8760329163.265507, 8760216236.660519, 8759785038.948332, 8757783822.788391, 8757450544.411057, 8757449718.304342, 8757449718.304342, 8757486337.17703, 8757066391.449924, 8756052566.026037, 8756857405.685383, 8756425887.731434, 8756425887.731434, 8756425887.731434, 8756450235.25936, 8756105828.460262, 8756875943.207634, 8756594190.380917, 8756446459.27391, 8756446459.27391, 8756446459.27391, 8757686540.212807, 8758091779.197897, 8758431994.358337, 8758977743.912422, 8758914069.015347, 8758908203.987803, 8758908203.987803, 8760206014.368326, 8760441844.42227, 8760292625.800333, 8760233124.677181, 8760005131.560944, 8759982747.580706, 8759982747.580706, 8759388439.54314, 8757210482.857874, 8756891855.350925, 8756906092.425068, 8759025051.05204, 8759036606.56284, 8759036606.56284, 8759455466.547466, 8759287647.684416, 8759197100.131554, 8759561479.790724, 8755795291.086184, 8755795291.086184, 8755795291.086184, 8755912118.479652, 8755796578.145426, 8755430520.275288, 8755819866.051872, 8756397685.433569, 8756397685.433569, 8756397685.433569, 8756261496.150171, 8756255755.508297, 8757671974.498238, 8756776109.79913, 8757092454.993746, 8757088904.818624, 8757088904.818624, 8757041484.937042, 8755972943.312405, 8755946543.248104, 8755929275.192724, 8755932434.763073, 8755932434.763073, 8755932434.763073, 8755932434.763073, 8755964464.693235, 8755668549.73173, 8755880053.85948, 8755809276.105345, 8755809276.105345, 8755809276.105345, 8756709228.188969, 8756667031.200027, 8757551021.373695, 8757042040.289848, 8757582610.055035, 8757582610.055035, 8757582610.055035, 8758680090.04997, 8757261409.987747, 8757444653.96306, 8757497296.140018, 8756660510.310526, 8756660510.310526, 8756660510.310526, 8756720259.869146, 8756633067.443438, 8756634092.058743, 8756429419.455362, 8756200528.111113, 8756194859.907732, 8756194859.907732, 8755504182.368256, 8755504182.368256, 8755174106.248941, 8755732454.724632, 8756729820.969643, 8756729820.969643, 8756729820.969643, 8756219833.721096, 8755299963.746145, 8755633985.868908, 8755838157.724766, 8754999620.682459]



# %%
def returnInventoryRiskFromInventoryFunction(inventory_values, inventory):
    '''
    

    Parameters
    ----------
    inventory_values : TYPE list
        DESCRIPTION. list of float with inventory values
    inventory : TYPE float
        DESCRIPTION.  value of invnetory 

    Returns
    -------
    inventory : TYPE float
        DESCRIPTION. risk value associated with the value of inventory

    '''
    inventory=float(inventory)
    #build empirical pdf and cdf
    D_inventory = pd.DataFrame(inventory_values,columns=['INVENTORY'])
    D_inventory = D_inventory.groupby('INVENTORY').size().to_frame().reset_index()
    D_inventory.columns = ['INVENTORY','FREQUENCY']
    D_inventory=D_inventory.sort_values(by=['INVENTORY'])
    D_inventory['PROB']=D_inventory['FREQUENCY']/sum(D_inventory['FREQUENCY'])
    D_inventory['CUMULATIVE']=D_inventory['PROB'].cumsum()
    
    #calculate the inventory quantity
    
    if(inventory>max(inventory_values)):
        D_opt_x_max=D_inventory.iloc[-1]
    else:
        D_opt_x_max=D_inventory[D_inventory['INVENTORY']>=inventory].iloc[0]
    
    if(inventory<min(inventory_values)):
        D_opt_x_min=D_inventory.iloc[0]
    else:
        D_opt_x_min=D_inventory[D_inventory['INVENTORY']<inventory].iloc[-1]
    
    x_array=[D_opt_x_min['INVENTORY'],D_opt_x_max['INVENTORY']]
    y_array=[D_opt_x_min['CUMULATIVE'],D_opt_x_max['CUMULATIVE']]
    
    prob=np.interp(inventory, x_array, y_array)
    risk=1-prob
    return risk






# %%
def returnInventoryValueFromInventoryFunctionRisk(inventory_values, risk):
    '''
    

    Parameters
    ----------
    inventory_values : TYPE list
        DESCRIPTION. list of float with inventory values
    risk : TYPE float
        DESCRIPTION.  value of risk 

    Returns
    -------
    inventory : TYPE float
        DESCRIPTION. inventory value associated with the risk

    '''
    #build empirical pdf and cdf
    D_inventory = pd.DataFrame(inventory_values,columns=['INVENTORY'])
    D_inventory = D_inventory.groupby('INVENTORY').size().to_frame().reset_index()
    D_inventory.columns = ['INVENTORY','FREQUENCY']
    D_inventory=D_inventory.sort_values(by=['INVENTORY'])
    D_inventory['PROB']=D_inventory['FREQUENCY']/sum(D_inventory['FREQUENCY'])
    D_inventory['CUMULATIVE']=D_inventory['PROB'].cumsum()
    
    #calculate the inventory quantity
    prob = 1-risk
    D_opt_x_max=D_inventory[D_inventory['CUMULATIVE']>=prob].iloc[0]
    D_opt_x_min=D_inventory[D_inventory['CUMULATIVE']<prob].iloc[-1]
    
    x_array=[D_opt_x_min['CUMULATIVE'],D_opt_x_max['CUMULATIVE']]
    y_array=[D_opt_x_min['INVENTORY'],D_opt_x_max['INVENTORY']]
    inventory=np.interp(prob, x_array, y_array)
    return inventory
# %%



# %%
def returnStockoutRisk(x,a,b,c):
    '''
    returns the CDF value of a triangular distribution

    Parameters
    ----------
    x : TYPE float
        DESCRIPTION. independent variable of the CDF
    a : TYPE float 
        DESCRIPTION. min value of the triangular distribution
    b : TYPE float
        DESCRIPTION. max value of the triangular sitribution
    c : TYPE float
        DESCRIPTION. mode of the triangular distribution

    Returns
    -------
    TYPE float
        DESCRIPTION. value of risk associated with the inventory level x

    '''
    probability = np.nan
    if x<=a:
        probability= 0
    elif (a<x) & (x<=c):
        probability= ((x-a)**2)/((b-a)*(c-a)) 
    elif (c<x) & (x<b):
        probability= 1 - ((b-x)**2)/((b-a)*(b-c))
    elif (x>=b):
        probability= 1
    else:
        print("Error in the CDF")
    return 1-probability

# %%
def returnStockQuantityFromRisk(risk,a,b,c):
    '''
    

    Parameters
    ----------
    risk : TYPE float
        DESCRIPTION. value of risk associated to the probability distribution (inverse of the probability)
     a : TYPE float 
        DESCRIPTION. min value of the triangular distribution
    b : TYPE float
        DESCRIPTION. max value of the triangular sitribution
    c : TYPE float
        DESCRIPTION. mode of the triangular distribution

    Returns
    -------
    x : TYPE float
        DESCRIPTION. value of inventory associated with the risk 

    '''
    

    u = 1-risk
    x = np.nan
    if (0<=u) & (u<((c-a)/(b-a))) :
        x= a + np.sqrt((b-a)*(c-a)*u)
    elif (((c-a)/(b-a))<=u) & (u<=1):
        x = b - np.sqrt((b-a)*(b-c)*(1-u))
    
    else:
        print("Error in the CDF")
    return x